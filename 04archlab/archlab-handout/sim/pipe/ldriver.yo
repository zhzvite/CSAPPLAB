                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx
0x03c: 720602000000000000   | 	jl L0R9
0x045:                      | Loop10:
0x045: 50870000000000000000 | 		mrmovq (%rdi),%r8
0x04f: 50970800000000000000 |                 mrmovq 0x8(%rdi),%r9
0x059: 50a71000000000000000 |                 mrmovq 0x10(%rdi),%r10
0x063: 50b71800000000000000 |                 mrmovq 0x18(%rdi),%r11
0x06d: 50c72000000000000000 |                 mrmovq 0x20(%rdi),%r12
0x077: 50d72800000000000000 |                 mrmovq 0x28(%rdi),%r13
0x081: 50e73000000000000000 |                 mrmovq 0x30(%rdi),%r14
0x08b: 50173800000000000000 |                 mrmovq 0x38(%rdi),%rcx
0x095: 50374000000000000000 |                 mrmovq 0x40(%rdi),%rbx
0x09f: 50574800000000000000 |                 mrmovq 0x48(%rdi),%rbp
                            | 
0x0a9: 40860000000000000000 | 		rmmovq %r8,(%rsi)
0x0b3: 40960800000000000000 |                 rmmovq %r9,0x8(%rsi)
0x0bd: 40a61000000000000000 |                 rmmovq %r10,0x10(%rsi)
0x0c7: 40b61800000000000000 |                 rmmovq %r11,0x18(%rsi)
0x0d1: 40c62000000000000000 |                 rmmovq %r12,0x20(%rsi)
0x0db: 40d62800000000000000 |                 rmmovq %r13,0x28(%rsi)
0x0e5: 40e63000000000000000 |                 rmmovq %r14,0x30(%rsi)
0x0ef: 40163800000000000000 |                 rmmovq %rcx,0x38(%rsi)
0x0f9: 40364000000000000000 |                 rmmovq %rbx,0x40(%rsi)
0x103: 40564800000000000000 |                 rmmovq %rbp,0x48(%rsi)
                            | 
0x10d: 6288                 | 		andq %r8,%r8
0x10f: 712201000000000000   | 		jle judge0
0x118: c0f00100000000000000 | 		iaddq $1,%rax
0x122:                      | judge0:
                            | 		
                            | 		
0x122: 6299                 | 		andq %r9,%r9
0x124: 713701000000000000   | 		jle judge1
0x12d: c0f00100000000000000 | 		iaddq $1,%rax
0x137:                      | judge1:
                            | 
                            | 		
0x137: 62aa                 | 		andq %r10,%r10
0x139: 714c01000000000000   | 		jle judge2
0x142: c0f00100000000000000 | 		iaddq $1,%rax
0x14c:                      | judge2:
                            | 		
                            | 		
0x14c: 62bb                 | 		andq %r11,%r11
0x14e: 716101000000000000   | 		jle judge3
0x157: c0f00100000000000000 | 		iaddq $1,%rax
0x161:                      | judge3:
                            | 		
                            | 		
0x161: 62cc                 | 		andq %r12,%r12
0x163: 717601000000000000   | 		jle judge4
0x16c: c0f00100000000000000 | 		iaddq $1,%rax
0x176:                      | judge4:
                            | 		
                            | 		
0x176: 62dd                 | 		andq %r13,%r13
0x178: 718b01000000000000   | 		jle judge5
0x181: c0f00100000000000000 | 		iaddq $1,%rax
0x18b:                      | judge5:
                            | 		
                            | 		
0x18b: 62ee                 | 		andq %r14,%r14
0x18d: 71a001000000000000   | 		jle judge6
0x196: c0f00100000000000000 | 		iaddq $1,%rax
0x1a0:                      | judge6:
                            | 		
                            | 		
0x1a0: 6211                 | 		andq %rcx,%rcx
0x1a2: 71b501000000000000   | 		jle judge7
0x1ab: c0f00100000000000000 | 		iaddq $1,%rax
0x1b5:                      | judge7:
                            | 		
                            | 		
0x1b5: 6233                 | 		andq %rbx,%rbx
0x1b7: 71ca01000000000000   | 		jle judge8
0x1c0: c0f00100000000000000 | 		iaddq $1,%rax
0x1ca:                      | judge8:				
0x1ca: 6255                 | 		andq %rbp,%rbp
0x1cc: 71df01000000000000   | 		jle step
0x1d5: c0f00100000000000000 | 		iaddq $1,%rax
0x1df:                      | step:
0x1df: c0f75000000000000000 | 		iaddq $0x50,%rdi
0x1e9: c0f65000000000000000 | 		iaddq $0x50,%rsi
0x1f3: c0f2f6ffffffffffffff | 		iaddq $-10,%rdx
0x1fd: 754500000000000000   | 		jge Loop10
                            | # applying range checks to remainders
0x206:                      | L0R9:
0x206: c0f20700000000000000 |         iaddq   $7,%rdx         # Compare with 3 (len + 10 - 3)
0x210: 722b02000000000000   |         jl      L0R2            # len < 3
0x219: 766d02000000000000   |         jg      L4R9            # len > 3
0x222: 739203000000000000   |         je      Rem3            # len == 3
0x22b:                      | L0R2:
0x22b: c0f20200000000000000 |         iaddq   $2,%rdx         # Compare with 1 (len + 3 - 1)
0x235: 73e403000000000000   |         je      Rem1            # len == 1
0x23e: 76bb03000000000000   |         jg      Rem2            # len == 2
0x247: 90                   |         ret                     # len == 0
0x248:                      | L4R6:
0x248: c0f20200000000000000 |         iaddq   $2,%rdx         # Compare with 5 (len + 7 - 5)
0x252: 726903000000000000   |         jl      Rem4            # len == 4
0x25b: 734003000000000000   |         je      Rem5            # len == 5
0x264: 761703000000000000   |         jg      Rem6            # len == 6
0x26d:                      | L4R9:
0x26d: c0f2fcffffffffffffff |         iaddq   $-4,%rdx        # Compare with 7 (len + 3 - 7)
0x277: 724802000000000000   |         jl      L4R6            # len < 7
0x280: 73ee02000000000000   |         je      Rem7            # len == 7
0x289:                      | L8R9:
0x289: c0f2ffffffffffffffff |         iaddq   $-1,%rdx        # Compare with 8 (len + 7 - 8)
0x293: 73c502000000000000   |         je      Rem8            # len == 8
                            | 
                            | # dealing with remainders
0x29c:                      | Rem9:
0x29c: 50874000000000000000 |         mrmovq 0x40(%rdi), %r8
0x2a6: 40864000000000000000 |         rmmovq %r8, 0x40(%rsi)
0x2b0: 6288                 |         andq %r8, %r8
0x2b2: 71c502000000000000   |         jle Rem8
0x2bb: c0f00100000000000000 |         iaddq $1, %rax
0x2c5:                      | Rem8:
0x2c5: 50873800000000000000 |         mrmovq 0x38(%rdi), %r8
0x2cf: 40863800000000000000 |         rmmovq %r8, 0x38(%rsi)
0x2d9: 6288                 |         andq %r8, %r8
0x2db: 71ee02000000000000   |         jle Rem7
0x2e4: c0f00100000000000000 |         iaddq $1, %rax
0x2ee:                      | Rem7:
0x2ee: 50873000000000000000 |         mrmovq 0x30(%rdi), %r8
0x2f8: 40863000000000000000 |         rmmovq %r8, 0x30(%rsi)
0x302: 6288                 |         andq %r8, %r8
0x304: 711703000000000000   |         jle Rem6
0x30d: c0f00100000000000000 |         iaddq $1, %rax
0x317:                      | Rem6:
0x317: 50872800000000000000 |         mrmovq 0x28(%rdi), %r8
0x321: 40862800000000000000 |         rmmovq %r8, 0x28(%rsi)
0x32b: 6288                 |         andq %r8, %r8
0x32d: 714003000000000000   |         jle Rem5
0x336: c0f00100000000000000 |         iaddq $1, %rax
0x340:                      | Rem5:
0x340: 50872000000000000000 |         mrmovq 0x20(%rdi), %r8
0x34a: 40862000000000000000 |         rmmovq %r8, 0x20(%rsi)
0x354: 6288                 |         andq %r8, %r8
0x356: 716903000000000000   |         jle Rem4
0x35f: c0f00100000000000000 |         iaddq $1, %rax
0x369:                      | Rem4:
0x369: 50871800000000000000 |         mrmovq 0x18(%rdi), %r8
0x373: 40861800000000000000 |         rmmovq %r8, 0x18(%rsi)
0x37d: 6288                 |         andq %r8, %r8
0x37f: 719203000000000000   |         jle Rem3
0x388: c0f00100000000000000 |         iaddq $1, %rax
0x392:                      | Rem3:
0x392: 50871000000000000000 |         mrmovq 0x10(%rdi), %r8
0x39c: 40861000000000000000 |         rmmovq %r8, 0x10(%rsi)
0x3a6: 6288                 |         andq %r8, %r8
0x3a8: 71bb03000000000000   |         jle Rem2
0x3b1: c0f00100000000000000 |         iaddq $1, %rax
0x3bb:                      | Rem2:
0x3bb: 50870800000000000000 |         mrmovq 0x8(%rdi), %r8
0x3c5: 40860800000000000000 |         rmmovq %r8, 0x8(%rsi)
0x3cf: 6288                 |         andq %r8, %r8
0x3d1: 71e403000000000000   |         jle Rem1
0x3da: c0f00100000000000000 |         iaddq $1, %rax
0x3e4:                      | Rem1:
0x3e4: 50870000000000000000 |         mrmovq (%rdi), %r8
0x3ee: 40860000000000000000 |         rmmovq %r8, (%rsi)
0x3f8: 6288                 |         andq %r8, %r8
0x3fa: 710d04000000000000   |         jle Done
0x403: c0f00100000000000000 |         iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x40d:                      | Done:
0x40d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x40e:                      | End:
                            | #/* $end ncopy-ys */
0x40e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: 0100000000000000     | 	.quad 1
0x418: feffffffffffffff     | 	.quad -2
0x420: fdffffffffffffff     | 	.quad -3
0x428: 0400000000000000     | 	.quad 4
0x430: 0500000000000000     | 	.quad 5
0x438: 0600000000000000     | 	.quad 6
0x440: 0700000000000000     | 	.quad 7
0x448: 0800000000000000     | 	.quad 8
0x450: 0900000000000000     | 	.quad 9
0x458: 0a00000000000000     | 	.quad 10
0x460: 0b00000000000000     | 	.quad 11
0x468: f4ffffffffffffff     | 	.quad -12
0x470: f3ffffffffffffff     | 	.quad -13
0x478: 0e00000000000000     | 	.quad 14
0x480: f1ffffffffffffff     | 	.quad -15
0x488: 1000000000000000     | 	.quad 16
0x490: 1100000000000000     | 	.quad 17
0x498: eeffffffffffffff     | 	.quad -18
0x4a0: edffffffffffffff     | 	.quad -19
0x4a8: 1400000000000000     | 	.quad 20
0x4b0: ebffffffffffffff     | 	.quad -21
0x4b8: 1600000000000000     | 	.quad 22
0x4c0: e9ffffffffffffff     | 	.quad -23
0x4c8: e8ffffffffffffff     | 	.quad -24
0x4d0: e7ffffffffffffff     | 	.quad -25
0x4d8: e6ffffffffffffff     | 	.quad -26
0x4e0: e5ffffffffffffff     | 	.quad -27
0x4e8: e4ffffffffffffff     | 	.quad -28
0x4f0: e3ffffffffffffff     | 	.quad -29
0x4f8: e2ffffffffffffff     | 	.quad -30
0x500: 1f00000000000000     | 	.quad 31
0x508: e0ffffffffffffff     | 	.quad -32
0x510: 2100000000000000     | 	.quad 33
0x518: deffffffffffffff     | 	.quad -34
0x520: ddffffffffffffff     | 	.quad -35
0x528: 2400000000000000     | 	.quad 36
0x530: dbffffffffffffff     | 	.quad -37
0x538: daffffffffffffff     | 	.quad -38
0x540: d9ffffffffffffff     | 	.quad -39
0x548: 2800000000000000     | 	.quad 40
0x550: 2900000000000000     | 	.quad 41
0x558: d6ffffffffffffff     | 	.quad -42
0x560: 2b00000000000000     | 	.quad 43
0x568: d4ffffffffffffff     | 	.quad -44
0x570: 2d00000000000000     | 	.quad 45
0x578: d2ffffffffffffff     | 	.quad -46
0x580: d1ffffffffffffff     | 	.quad -47
0x588: d0ffffffffffffff     | 	.quad -48
0x590: 3100000000000000     | 	.quad 49
0x598: ceffffffffffffff     | 	.quad -50
0x5a0: cdffffffffffffff     | 	.quad -51
0x5a8: 3400000000000000     | 	.quad 52
0x5b0: 3500000000000000     | 	.quad 53
0x5b8: 3600000000000000     | 	.quad 54
0x5c0: 3700000000000000     | 	.quad 55
0x5c8: 3800000000000000     | 	.quad 56
0x5d0: c7ffffffffffffff     | 	.quad -57
0x5d8: c6ffffffffffffff     | 	.quad -58
0x5e0: c5ffffffffffffff     | 	.quad -59
0x5e8: 3c00000000000000     | 	.quad 60
0x5f0: 3d00000000000000     | 	.quad 61
0x5f8: 3e00000000000000     | 	.quad 62
0x600: 3f00000000000000     | 	.quad 63
0x608: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x610:                      | 	.align 16
0x610:                      | Predest:
0x610: fadebc0000000000     | 	.quad 0xbcdefa
0x618:                      | dest:
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810:                      | Postdest:
0x810: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x818:                      | .align 8
                            | # Run time stack
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
                            | 
0x898:                      | Stack:
